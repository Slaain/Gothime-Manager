version: '3.8'

services:
  db: # Service pour la base de données PostgreSQL
    image: postgres:latest
    container_name: postgres_db
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORB_NAD: postgres 
      POSTGRES_DB: time_manager_api_dev
    volumes:
      - db_data:/var/lib/postgresql/data
    ports:
      - "5432:5432" 
  
  phoenix: # Service pour le backend
    build:
      context: ./time_manager_api
      dockerfile: Dockerfile
    container_name: phoenix
    command: mix ecto.create && mix ecto.migrate && mix phx.server
    volumes:
      - .:/time_manager_api/app
    ports:
      - "4000:4000"
    environment:
      DB_USERNAME: postgres
      DB_PASSWORD: postgres
      DB_HOSTNAME: db
      DB_NAME: time_manager_api_dev
      DB_PORT: 5432
    depends_on:
      - db 
    # command: ["sh", "./entrypoint.sh"]

  frontend:  # Service pour le frontend
    build:
      context: ./time_manager_frontend
      dockerfile: Dockerfile  # Spécifie le Dockerfile à utiliser pour construire l'image frontend
    container_name: vite_frontend
    ports:
      - "5173:5173"  # Redirige le port Vite vers l'hôte
    depends_on:
     - phoenix  # Assure que le service backend "phoenix" soit démarré avant ce service
    volumes:
      - .:/time_manager_frontend/app  # Monte le répertoire local du frontend pour permettre
      - /app/node_modules  # Exclut le répertoire node_modules pour éviter les conflits de dépendances

  adminer:  # Service pour l'interface de gestion de base de données PgAdmin
    image: adminer:latest
    container_name: adminer
    restart: always
    ports:
      - "8081:8080" # Expose l'interface web de PgAdmin
    depends_on:
      - db  # Assure que le service "db" soit démarré avant ce service

volumes:
  db_data: